/* 좋아. 이제 우리가 하고 싶은건, 유저가 이름을 제출하면,
클릭, 짠, 이 때 form을 없애고 싶어.
이 form 자체가 사라져야 돼. 아예 없어져야 돼.
이걸 구현하기 위한 방법이 있는데, HTML 요소 자체를 없애는 거야. 이렇게.
그게 첫번째 방법이고, 다른 방법은 CSS를 이용해서 숨기는거야.
우리는 CSS에 hidden이라는 classname을 만들어 줄거야.
이 classname이 하는 일은 display: none 이거 뿐이야. 정말 간단하지.
오케이.
어떤 요소에게든 이 classnames을 주면, 그 요소를 숨기게 될거야
좋아. 예시를 보자고.
form에 class="hidden"을 추가하고 새로고침하면, 완전히 사라졌지.
단순히 hidden이라는 classname을 더해주는거야. 그게 끝이야.
오케이, 그게 전부야.
물론 유저가 이름을 제출한 뒤에만 말이야.
알겠지? 좋아.
이따 더해줄거니 일단 classname은 지워주고,
유저가 이름을 form을 통해 제출했을 때, 기본 동작은 막아주고.
유저 이름은 const username = loginInput.value로 저장해주고,
그러고 나서 뭘 할거냐면
(위와 같이 작성)
classname을 추가하거나 삭제하는 방법은 알고 있으니까
(위와 같이 작성)
끝.
그래도 확인 차 console.log(username) 해주자.
새로고침하고 검사.
여기로 와보면, 짜잔.
form은 사라졌지만 입력값은 console에 기록됐어.
좋아. 완벽해.
2단계로 가자.
여기에 다른 HTML 요소를 추가할 거야.
이 요소는 h1이고 내용은 비워둘거야.
그냥 비워둔 채로 둘거야. 하지만 h1이 될거고.
그리고 이 h1은 기본값으로 hidden이라는 class name을 갖게 될거야
정말 멋지지 않아?
다시 새로고침하고 body를 살펴보면,
form이 있고 h1도 있는데 h1은 숨겨져 있지.
좋았어.
이제 할 일은, form은 숨기고 h1은 표시되도록 하는거야.
하지만 h1에 표시할 텍스트가 있을 때만 표시되도록 할거야.
그럼 이제 우리가 할 일은,
기본 동작은 실행되지 않도록 막아주고.
hidden이라는 class name을 더해줘서 form을 숨기고
유저의 이름을 변수로 저장해주고, 그 이름은 h1 안에 넣어줄거야.
일단 여기에 greeting 이란 id를 추가해줄거야.
app.js로 돌아와서 이 id를 찾아줄거야.
(위와 같이 작성)
이러면 끝이야
이제 이 h1을 가져다가 뭘 할거냐면
h1 안에다 greeting에 있는 텍스트를 추가할거야.
greeting.innerText = "Hello " + username;
이럼 준비 끝이야.
준비됐지?
하지만 이게 끝은 아니야. 하나 빼먹은게 있거든.
일단 작동 되는지부터 보자고.
이름이 뭐에요? 니꼬.
이거 보라고.
form은 숨겨졌어.
class="hidden"이 추가됐고 h1 안에는 "Hello nico"가 들어갔어.
잘 작동하고 있어. 하지만 h1에서 hidden class 빼는걸 깜빡했어.
(위와 같이 작성)
hidden class를 제거하고 싶어
우리가 hidden을 두 번 사용하고 있으니,
여기에 const HIDDEN_CLASSNAME = "hidden"을 추가할게.
무슨 생각하는지 알어. "왜 이건 대문자로 쓰지?"
이건 그냥 관습같은거야. 누군가는 좋아하고 누군가는 싫어하는.
일반적으로 string만 포함된 변수는 대문자로 표기하고 string을 저장하고 싶을 때 사용해
그리고 이건 loginForm이나 loginInput 처럼 중요한 정보를 담은게 아니라서 대문자로 작성해.
"hidden"들은 HIDDEN_CLASSNAME으로 바꿔주면 준비 끝!
이렇게 해주면 유저한테 인사를 할 수 있어.
걱정마. 다음 영상에서 복습할테니까.
니코 입력하고 짠!
잘 작동되고 있어. 새로고침하고
짠. 작동되지.
HTML을 살펴보면 단순히 classname을 추가해주고 삭제하고 할 뿐이야.
물론 h1안에 텍스트를 추가하기 전에는 이 hidden class를 삭제할 수 없지.
하지만 보다시피 작동하지.
이것 봐.
여러분들이 이해해야 하는 거라서 보여주고 싶은 것이 하나 있는데,
여기 자세히 보면 멋진 string 두 개의 조합이 있지?
내가 지금 하고 있는 건 두 개의 string을 합치는 거야.
Hello, 한 칸 띄워주고, + username.
이렇게 합치는 것도 하나의 방법이야.
난 이 방법을 별로 좋아하지 않아. 간격도 기억해야 되고 + 도 보기 안좋아.
이걸 대체할 방법을 보여줄게 그건 바로
` ` 이걸 활용하는 거야.
우리가 전에 했던 방식 대신에..
아니다 일단 원래 있던 걸 복사해볼게
새로운 방법을 보여줄게
이렇게 하면 돼.
(위와 같이 작성)
이 두 가지 방법 모두 똑같은 동작을 수행할거야.
둘 다 Hello 다음에 한 칸 띄우고 username 변수의 값을 표시해줄거야.
첫 번째는 이런 + 기호를 써야 되고,
두 번째는 다른 규칙들이 있긴한데 난 이 방법을 선호해.
이 둘은 똑같아. 둘 다 string이랑 변수를 하나로 합쳐주고 있어.
둘 다 변수를 strings 안에서 사용할 수 있게 해줘.
이게 다야.
그런데 둘은 다른 방식이고, 후자가 좀 더 새로운 방법이야.
하지만 이 방법은 한 가지, 아니 두 가지 규칙이 있어.
규칙 하나는, 네가 만약 변수와 string을 결합하고 싶다면
또는 변수를 string안에 집어넣고 싶다면
${변수명} 이렇게 표현하면 끝이야. 정말 끝이야.
말 그대로 끝이야.
그 뒤에 뭘 추가해도 상관없고 이 부분만 JS가 변수값으로 바꿔줄꺼야.
가장 중요한 규칙은 ` ` 이 기호로 시작해야 된다는 거야.
` ` 백틱 기호
알겠지?
' ' 이거나 " " 이게 아니야.
` ` 이거야.
아주 중요해.
쌍따옴표나 따옴표가 아니라 백틱이야.
비슷하게 생겼지만 달라! "쌍따옴표" 아니고 '따옴표' 아니고 `백틱`
매번 그렇듯 이번에도 이거 관련 댓글이 달릴텐데,
` 대신 ' 를 쓰면 작동하지 않을거야.
이건 전혀 작동하지 않아.
새로고침하고 짜잔. 전혀 작동되지 않고 있지.
변수값이 반영되고 있지 않아.
일반 따옴표랑 ${ } 를 같이 사용하면,
변수값은 전혀 반영되지 않고 있어. 그냥 안 돼.
따옴표 대신 시작과 끝에 백틱을 입력해야 돼.
이제 변수값이 string으로 입력될거야.
물론 네 취향은 다를 수 있으니 알려줘. "Hello " + username이 나은지,
`Hello ${username}` 이 방법이 나은지.
난 후자가 더 보기 좋아서 선호하는데 넌 아무 방법이나 선택해도 좋아.
우리가 기억해야 할 건 여기 사용되는 백틱이야. 이거 정말 중요해.
${ } 여기 사용되는 중괄호 표시랑 달러 표시도 더불어서 말이지.
이렇게 작성해서는 안되겠지.
이렇게 작성해도 안되고.
` `, ${ } 이것들을 함께 써야 돼.
이걸로 끝이야.
보다시피 이제 이건 잘 작동하고 있지.
완벽하게 동작해. 그리고 우린 한 가지를 더 배웠어.
그건 string이랑 변수를 합치는 방법, 변수를 string 안에 포함시키는 방법이야.
아까 얘기했듯이 여기에 계속 추가해 나가도 상관없어.
우리는 이제 유저한테 인사하고 있어.
정말 멋지지. 짱이야!
미션 성공, 유저한테 인사하기.
문제는 우리가 유저를 전혀 기억할 수 없다는거야.
새로고침 할 때마다 새로 로그인 해줘야 되지. 겁나 별로야.
새로고침 할 때도 form 볼 필요 없이 이름이 저장되어 있으면 좋겠어.
이건 다음 영상에서 할거야
담에 봐. 바이바이!
 */