/* 
전에 언급했듯이, 우리는 이제 button의 클릭여부말고 form의 submit에 관심이 있어.
submit이라는 event가 발생하는 걸 아예 막거나 중간에 개입해서
submit event가 발생했다는 걸 파악하고 싶어.
이제 더 이상 이 loginButton은 필요없으니 삭제해주자고.
고맙지만 이젠 필요 없어
우리가 지금 필요한 건 login-form 그 자체야.
const loginForm = document.querySelector("#login-form")
이런거 찾는 건 이제 쉽지.
이제는 클릭이 아닌 submit을 감지해야지.
다행히도 우리는 submit event가 있지
(위와 같이 작성)
여기에 click이라고 입력할까? 아니지 submit 을 입력할거야
그리고 이 function을 활용해 줄건데 이름은 onLoginSubmit으로 바꿔주자고.
좋았어.
이제 form의 submit event를 감지하고 있는데
submit은 엔터를 누르거나 버튼을 클릭할 때 발생한다는 사실을 기억하도록 해.
좋아, 그럼 우리의 아름다운 브라우저에서 잘 작동되는지 확인해보자고.
새로고침 해보면, 콘솔에는 이상없고, 클릭해보면?
브라우저가 검증작업을 해주고, 다시 입력하고 로그인!
뭐가 지나갔지?
뭔지 봤어? 자 다시, 이 부분에 집중해봐.
바로 여기 집중해봐. 3, 2, 1 짠!
보다시피 뭔가가 나타났다고 바로 사라지고 있어.
뭐가 어떻게 되고 있는걸까.
무슨 일이 일어나고 있는거냐면 우리가 목표의 50%를 마친거야
미션 하나는 form을 submit 할 때 입력값을 받아내는 거고 그건 지금 우리가 해냈어.
3, 2, 1. 콘솔에 집중하고. 고!
그 부분은 잘 되고 있어.
submit event을 감지해내고 있어.
하지만 아직 새로고침은 못 막고 있단 말이야.
여기서 새로고침이 일어나는건 form submit의 기본 동작이야.
브라우저가 그러도록 프로그래밍 되어 있다고.
브라우저는 엔터를 누를 때 새로고침을 하고 form을 submit 하도록 되어있어.
브라우저는 그렇게 동작해.
브라우저는 이 버튼을 누를 때도 같은 행동을 하도록 프로그래밍 되어 있고
이게 바로 기본 동작이야.
우리가 해야할 일은 이 기본 동작이 발생하지 않도록 하는거야.
이건 사실 굉장히 간단하게 할 수 있어
JS가 우리에게 많은 도움을 주기 때문이지
다시 여기로 돌아와서,
전에 얘기했듯이, 여기서 우리가 해야 할 일은
EventListener를 추가할 때
이렇게 작성하지 않지. ()를 추가하지 않아
()를 추가하는건 function을 '즉시' 실행한다는 뜻인데 우린 바로 실행되는 걸 원하지 않아
submit event가 발생하면 브라우저가 알아서 저 function을 실행시켜 줄거야.
아주 중요하니까 꼭 기억하고. 정말 정말 중요해
() 이것들을 더하면 브라우저가 보자마자 자동으로 이 function을 실행시켜버릴거야.
이건 너가 function을 실행해버리는거야.
브라우저가 이걸 보는 순간 바로 실행시켜버릴테니까.
addEventListener를 활용할 때는 바로 실행시키려고 하는게 아니야.
addEventListener를 활용할 때는 function의 이름만 적어주고
그럼 지정한 이벤트가 발생했을 때만 브라우저가 해당 function을 실행시킬거야.
그러니까 네가 할 필요는 없어
짚고 넘어가야 될게.. 내가 거짓말을 했어. 난 거짓말쟁이야.
쏘리.
브라우저가 정확히는 onLoginSubmit()을 하고 있는게 아니야.
브라우저는 우선 onLoginSubmit function을 호출하고,
브라우저가 function을 실행시키고 있기는 하지만
여기 이 안에서 너한테 정보를 주고 있어
브라우저는 브라우저 내에서 event로부터 정보를 잡아내서
onLoginSubmit function 실행 버튼을 누르고 있어
너에게 중요할지도 모르는 정보를 가지고 있는 채로 말이지
못 믿겠다면 여기 argument를 추가해보자. 아무거나 상관없어.
info, band, potato 다 상관없고 늘 하듯이 tomato도 괜찮아.
좋았어.
중요한 건, event가 발생할 때 브라우저가 네 function을 호출하게 되는데,
이렇게 비어있는 채로 호출하진 않고
여기에 첫 번째 argument로써 추가적인 정보를 가진 채로 호출하게 될거야.
어떤 정보를 브라우저가 주고 있는지 보여주기 위해서
신비한 코드를 한 줄 추가할거야.
지금은 이해가 안되겠지만, 겁먹지 말고, 페이지 닫지 말고, 영상 끄지 말고
좀만 기다려보면 다 이해 될거야.
이 부분은 잠깐 지워두고 이따 다시 살펴볼거고.
지금 중요한건 브라우저가 우리한테 어떤 정보를 넘겨주는지 확인하고 console.log 해보자고.
그럼 다시 새로고침 하고 짜잔.
보다시피 사실이었어!
뭔가 정보를 얻고 있다구
onLoginSubmit function에 대한 argument로 말이지.
오케이?
이 tomato argument에 포함된 정보로 이것저것 하게 될테니 이 부분을 꼭 제대로 이해하고 가야해.
우리가 지금 하고 있는 건 onLoginSubmit 이라는 function을 만들고
이 function이 하나의 argument를 받도록 하고 있는거야.
그게 끝이야. 이 function이 하나의 argument을 받도록 하고 그걸 JS에 넘겨주고 있어.
누군가 form을 submit하면 JS가 이 function을 호출하도록 하고있어.
JS는 여러분들을 너무 사랑해서 function을 이 상태로 호출하지 않을거야
놉!
JavaScript가 하게 될 일이 뭐냐면, 여기에서
onLoginSubmit 함수의 첫번재 argument로
발생한 일에 대해 네가 필요로 할만한 정보들을 주는 것이야.
그게 지금 작성한 코드가 하고 있는 일이야.
모든 EventListener function의 첫번째 argument는 항상
지금 막 벌어진 일들에 대한 정보가 될 거야.
그리고 JS가 여러분들에게 그 정보를 무료로 제공하지.
우리는 공간만 제공하면 돼.
argument 공간만 제공하면 JS가 알아서
방금 일어난 event에 대한 정보를 지닌 argument를 채워넣을거야
그 결과를 여기에서 확인할 수 있지.
보다시피 여기에 tomato를 console.log하고 있고 여러 정보가 표시되고 있어.
중요한건 여기 있는 이 정보가, 방금 실행된 event라는 거야.
여기 있는 것들이 방금 실행된 event에 대한 여러 정보들이야.
여기서 우린 정보를 얻을 수 있지
예를 들면, submit 주체가 누구인가?
input이 제출한 것이다.
대상은 무엇인가? form.
오케이.
언제 submit 되었는가? 여기 이 시간.
이런 정보들을 얻을 수 있어.
이 부분에는 내가 뭘 한걸까?
내가 한 일이라곤, preventDefault 라는 function을 호출한 것 뿐이야.
이 function이 하는 일은
어떤 event의 기본 행동이든지 발생되지 않도록 막는거야.
앞서 말했듯 기본 행동이란 어떤 function에 대해 브라우저가 기본적으로 수행하는 동작이야.
누군가 form을 submit하면 브라우저는 기본적으로 페이지를 새로고침 하도록 되어 있어.
이 function을 추가함으로써 그 기본 동작을 막고 있는거야.
그리고 이건 EventListener 함수의 첫 번째 argument 안에 있는 function이야.
EventLisener에 어떤 function을 추가하던 간에
JS에서는 공짜로 첫번째 argument로 발생된 event에 대한 정보를 줄거야.
이건 선택사항이야. 필요없다면 그냥 둬도 괜찮아.
이렇게 하면 어떤 정보도 받지 않겠다는 건데
하지만 여기에 공간을 만들어주면 JS에서 event를 채워줄거야
이제 tomato를 event로 바꿔줄건데 보통 이렇게 작성하는게 관행이야.
여기서 우리가 하는 일은 브라우저가 기본 동작을 실행하지 못하게 막아주는 것 뿐이야
그리고 이번 강의에서, 우리는 말 그대로 아무것도 안 하더라도
아무것도 하지 않음으로써, JS가 어떤 정보를 담은 채로 function을 호출한다는 것을 배웠어.
event object를 담은 정보 말이야
그리고 event object는 이것들이야
여기엔 기본적으로 제공되는 function이 있는데 그게 바로 preventDefault 야.
이걸 호출하면 브라우저의 기본 동작을 막아줄거야.
그럼 이제 여기를 loginInput.value로 바꿔주면,
버튼을 클릭해도 새로고침이 안되는걸 확인할 수 있어.
이제 우리가 submit event를 컨트롤 하는거야
submit event가 발생할 때 JS는 onLoginSubmit function을 호출하고 있고
이 때 event object를 argument로 주고 있고
우리는 기본 동작이 실행되는 걸 막아주고 있어.
아직은 좀 헷갈릴 수 있다는 거 알아. 하지만 다음 영상에선 이해하게 될거라고 약속할게
다음 강의에선 가장 기본적인 동작을 막아볼텐데,
그건 링크를 클릭하는 동작이야. 그리고 여러분들은 내가 무슨 말을 하는지 이해하게 될 거야.
다음 영상에서 만나, 바이 바이.
 */