
const h1 = document.querySelector(".hello:first-child h1")

function handleTitleClick() {
    //h1.className = "clicked";
    console.log(h1.className);
    const clickedClass = "clicked"
    if (h1.className === clickedClass) {
        h1.className = "";
    } else {
        h1.className = clickedClass;
    }
};

h1.addEventListener("click", handleTitleClick)
// h1.onclick = handleTitleClick;

// 좋았어, 저번 영상에서는
// 우린 application의 스타일링을 더 잘 할 수 있다고 했어
// 왜냐면 지금은 style이 JavaScript에서 변경이 되고 있기 때문이지
// 그리고 이건 별로 스마트하지 않다구
// 나는 일을 할때 그 일에 적합한 도구를 사용하길 원하고, style 작업에 적합한 도구는 CSS이기 때문이야
// 그리고 animation에 적합한 도구는 JavaScript이고 말이지
// 그러니까 나는 내 JavaScript 안에 CSS 작업을 하는걸 원하지 않아
// 그 대신에, 나는 여러분에게 JavaScript와 HTML, CSS간의 춤사위가 뭔지를 다음에 우리가 application을 build 할 때 보여줄거야
// 이제 여기에 있는 것들 전부 삭제할거야
// 짜잔! 자 여기서 다시 한번 알려줄게
// 우린 JavaScript에 색깔 이름을 사용하지 않을거고 style 이름도 적지 않을거야
// 왜냐하면 style은 이곳에 작성하는게 더 좋거든
// 알겠지? CSS 파일에 말이야. 
// 자 여기에 우리 index.html파일이 있고, 이 index.html파일은 CSS문서와 JavaScript문서를 import 하고 있어
// 꼭 확인하도록 해
// 자 이제, 우리의 CSS파일에서, 이 h1을 가져다가 뭘 할거냐면, 이 h1의 색깔을 기본값을 파란색으로 지정해줄거야
// 기본값으로 말이지. 이제 이 h1은 CSS 파일로 인해 파란색이 됐어
// 그리고 이제, 여기에 active란 class를 생성할거야. 그리고 이 class는 color를 tomato로 지정해 줄거야
// 이제 이 class를 어떤 element에 지정해 주면, 어떤 element든지, h1이던 span이던 간에, tomato 색깔을 가지게 될거야
// 알겠지? 이게 다야. 이제, 내가 JavaScript에서 하고 싶은건, 이 h1에 active class를 전달해 주고 싶어
// 알겠지? 이걸 하는 방법은 굉장히 간단해
// (위와 같이 입력)

// 당연하게도, active의 스펠링을 정확하게 적어줘야해. 여기 있는 이 active가 여기의 active의 스펠링과 똑같아야 한다구
// 좋아, 이제는 JavaScript가 CSS에게 직접 대화하지 않게 되었어
// 여기서 JavaScript는 HTML을 변경할거고, CSS는 HTML을 바라보고 있지
// 그리고 결과적으로는 이렇게 된다구
// 자 이제 여기로 돌아와서, 여기 이 h1을 click하면, 그리고, 제대로 동작한다구
// 아름다워, 완벽해! 그렇지? 내가 볼 때 이게 더 좋은 방법이라고 말할 수 있어
// 더 적은 JavaScript 코드로 동일한 결과를 얻었기 때문이야. 그리고 덜 헷갈리지, 당연하게도
// 알겠지? 이건 정말 멋지다구
// 하지만 내가 진짜로 원하는건, 내가 이걸 다시 한 번 클릭하면 여기 보이는 이 class name을 제거하고 싶어
// 이렇게 하고 싶은거지
// class가 없는 상태. 파란색으로 다시 돌리고 싶어. 
// 한 번 클릭하고, 다시 한 번 클릭하면, class name이 없어지는거야
// 알겠지? 내가 원하는건 이거야
// 좋았어, 다시 한번 상기하자면, 이 h1.className은 getter이면서 setter야
// 이게 무슨 뜻이냐면, 만약 여러분이 console.log로 h1.className을 출력한다면 여러분들이 얻어오는 것은 className의 현재값이야
// 이 경우에는, h1에 click하게 되면 아무것도 출력이 안되지, 당연하게도. 하지만 여기에 class name을 추가해준다면
// (위와 같이 입력)
// 좋았어, 이제 click을 다시 하게 되면 class name을 얻어올 수 있지
// 좋았어. 우린 현재의 class를 얻어올 수 있지만, 우린 class를 변경할 수도 있어
// 이게 무슨 뜻이냐면, 자 이제 이렇게 할 수 있지, 
// if문을 사용해서 만약 h1의 class name이 active라면 이걸 제거하고 싶으니까, h1.className를 비워줄거야
// 하지만 만약, h1의 class name이 active가 아니라면, 이건 else겠지?
// 그렇다면 여기선 class name을 추가해 줄거야
// 다시 한번, (=) 부호가 세개라면, className이 active와 같은지 확인 하는거고, (=) 부호가 하나라면, 해당 값을 여기 이 값으로 변경해주는거야
// 알겠지? 자 이제 한번 해보자. 여기 와서, element 확인 하고, click 하면, class name을 추가했어
// 여기 보이듯이 말이야, 다시 click 하면 제거하지
// 추가하고, 제거하고, 추가하고, 제거하고
// 멋진 녀석이야! 그렇지? 여기 보듯이, 아주 잘 동작하고 있고
// 우린 이제 CSS를 사용하고 있기 때문에, 이렇게도 할 수 있어

// (위와 같이 입력)
// 여기에 굉장히 멋진 transition을 추가했어. 아~주 멋져
// 하지만, 아직도 우리의 코드는 개선의 여지가 조금 있어. 코드를 깔끔하게 하는 한 가지 방법은 다음 영상에서 다룰거고,
// 다른 방법은 이 영상에서 다룰건데, 그 방법은, 여길 보면 우리는 이 string을 두 번 사용하고 있어. 그렇지?
// 그리고 이것들은 error의 위험이 있어. 
// 자, 여러분들도 알고 있을지는 모르겠지만, 이 active란 녀석은, 내가 이 active란 이름을 지어낸거야. 맞지?
// 이걸 active 대신에 clicked라고 지어줄 수도 있어. 알겠지?
// 이제 여기다 clicked로 변경해주고, 여기에도 clicked로 변경해줘야 해. 알겠지?
// 하지만 이 모든게 제대로 동작하려면, clicked이라는 단어가 정확하게 사용되야 해
// 왜냐하면 이건 class name일 뿐이고, 아무도 이걸 확인해보지 않아. 이건 그저 class name일 뿐이니까. 알겠지?
// 난 그저 여기서 정의된 것과 똑같이 쓰면 돼. 하지만 JavaScript 코드 중에, 만약 내가 실수로 이렇게 적어버린다면,
// 이건 당연히 제대로 동작을 안할거고, 난 왜 이러지 하고 생각할거야
// 왜 이러지, 왜 이러지x2
// 알겠지? 이건 나를 포함해서 굉장이 많은 사람들이 자주 하는 실수야
// 왜냐하면 이건 말이야, 우리가 raw value라고 하는 건데, 이건 개발자가 이렇게 적겠다고 선택한거야. 맞지?
// 하지만 여기에 이런 실수를 할 수 있다는거지. 자, 여기에 이 raw string들을 사용하는 대신에, 
// 여기에 틀린 단어를 사용하는 실수를 범할 수도 있고, 여기 이 두 단어는 같아야 하는데 말이지
// 우리가 할 수 있는건, 여기에 constant를 생성하고, 그리고 이걸 clickedClass라고 이름을 지어주자 알겠지?
// 그리고 여기에 clicked를 넣어주자구. 그리고 이제 이걸, 요걸로 바꿔줄 수 있겠군. 알겠어?
// 이제 우리는 error가 발생 할 수 있는 부분을 축소 했어. 왜냐하면 이제 우리는 그저 CSS에서 복붙만 하면 돼
// 한 번만 복붙하면 된다는거지. 이제 이 class를 사용하려면, 이 변수가 있어
// 그리고, 만약에 우리가 이 변수를 적는데 실수를 한다면, JavaScript가 여기에서 알려줄거야
// 예를 들어서 여길 보면, 이 변수가 정의되어있지 않대. 알겠지? 이 마법의 string을 변수에 저장하는건 아주 유용해.
// 좋았어. 이게 "코드를 깔끔하게 - 파트 1"이야

// 이제, 나는 여러분에게 우리의 코드에서 발견된 버그 하나를 보여줄거야
// 그리고 그 버그가 어떻게 생겼냐면, 이제 여기 이 h1은 class가 없는 상태로 시작했는데, 만약 여기에 class가 있는 상태로 시작하면 어떻게 될까?
// 이제 여기에 내가 sexy-font란 class를 한번 추가해볼게. 알겠지?
// 자 이 sexy-font란 class는 그저 멋진 폰트를 가지고 있을 뿐이라구
// (위와 같이 입력)

// 자 여기에 무슨 일이 일어날 거냐면, 내가 새로고침을 하게 되면, 내 h1이 sexy-font란 class와 함께 시작해
// 하지만 우리의 JavaScript를 보게 된다면, 우리는 이 class name을 말 그대로 교체해버린다구.
// 우리의 JavaScript는 과거 따위는 신경도 안쓰고 그냥 교체해버려
// 어떤 의미인지 이걸 click하면 볼 수 있어. 3, 2, 1 클릭
// 자 여길 보면, 말 그대로 이걸 바꿔버렸어. 알겠어? 과거 따위는 신경도 안쓴다구
// 당연하게도, 이건 아직 제대로 동작해. 효과도 제대로 동작한다구
// 하지만 최초의 class name이 없어져 버렸어. 난 이 sexy-font를 정말로 간직하고 싶은데 말이지
// 문제가 생겼군. 문제는, 아마도 여기에 sexy-font를 추가해 줄 필요가 생겼다는 거겠지
// 여길 보면, 이제 clicked와 sexy-font가 제대로 추가되고 제거되고 있어. 하지만 이건 별로 좋은 방법이 아니야
// 왜냐하면 내가 만약 이걸 조금만 변경한다면, class 하나를 추가한다던지 하면 
// 내 JavaScript는 물론이고 CSS까지 업데이트 해줘야 된다는 말이야. 이건 정말 정말 나쁜거야
// 우리가 정말로 해줘야 하는건, JavaScript로 모든 class name을 변경하지는 않는거야
// 우린 원래 있던 class name을 간직하고 싶어. sexy-font를 간직하고 싶다는 말이야. 알겠지?
// 우리가 변경하길 원하는건 이 clicked라는 class야
// 우리는 이 sexy-font를 삭제하지 않고, clicked class를 변경하고 싶다는 거지
// 그리고 이건 다음 영상에서 고쳐볼거야.바이바이!
