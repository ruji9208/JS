// 이번 강의에서는 username의 유효성을 검사할거야
// 알겠지?
// 우선 username이 비어있으면 안되고,
// 너무 긴 username이어도 안 돼
// 좀 더 확실하게 하기 위해서 말이야.
// 매번 loginInput.value를 적는 것 대신에 우리는
// 이걸 변수로 만들어 줄거야
// (위와 같이 작성)
// 좋아 이제 value 값이 없을 경우 다음과 같이
// "Please write your name"을 console.log하자
// 확인해보자. 새로고침하고 클릭하면
// Please write your name.
// 멋져. 이제 이걸 user가 볼 수 있게 alert로 바꿔주자.
// 다시 실행해 보면
// Please write your name, 완벽해.
// 이번에는 여기에 else if를 해주고 value를 확인할거야
// user 가 입력한 username을 뜻하는 value 말이지
// 변수명을 username으로 바꾸고
// 여기서 username이 15글자를 초과하지 않는지 확인할 수 있어.
// 예를 들자면 말이지. 그냥 확인용이야
// 만약 username이 15글자를 초과한다면 경고창을 보여줄거야
// "이름이 너무 길어!" 라고 말이지
// 좋아.
// 여기서 string의 길이를 어떻게 구할 수 있을까?
// 이전 영상들에서 말했다시피, 개발자들이 항상 필요한 것들이 있어
// 예시로 classname를 제거하거나, 더하거나, string의 길이를 구하는 것 말이야
// 이런 이유로 JS에는 이미 우리를 위해 이런 것들이 필요할 때
// 언제든지 공짜로 이용 가능한 장난감들을 가지고 있어
// 지금 같은 경우에는 username 뒤에 .length를 더해줄거야.
// 이런 식으로 string의 길이를 구할 수 있어.
// 콘솔에서 확인해 보도록 할게.
// (위와 같이 작성)
// 그런 다음에 hello.length을 입력하면,
// 이것 보라고. 짜잔! 15.
// 멋지지?
// 좋아 아주 멋져.
// string 다음에 .length만 입력해 주면 되는거야.
// 그렇다면 여기서도 똑같이 username.length를 입력하면 되겠지.
// 대신 확인할 조건을 추가해 줘야겠지.
// 만약 username의 길이가 15보다 길다면,
// 이름이 너무 길다고 alert 해줄거야.
// 확인해보자. 다시 새로고침 하고..
// 잘 표시되고 있어. 이름이 너무 깁니다! 아주 잘 동작해
// 비어있을 때도 잘 작동되지 이름을 적어주세요
// 제대로 입력하면.. 좋았어.
// 보다시피 Log In을 눌렀을 때 에러가 전혀 없지.
// 만약 user들을 괴롭히고 싶다면 이름이 너무 짧다고 조건을 추가하면 돼
// 하지만 그렇게까지는 안할거야.
// 이렇게 작업을 하긴 했지만 내가 선호하는 방법은 아니야.
// JS만으로 작업 시에는 해야만 하는 작업이지만
// 브라우저 자체의 기능을 사용할 수도 있어. 알겠지?
// 지금 이대로도 괜찮긴 한데,
// 항상 user가 입력하는 값의 유효성을 확인하는 건 좋은 연습이야
// 절대 user를 믿지마. 절대 믿으면 안 돼
// 하지만 말했듯이 항상 최고의 툴을 사용해야 하고
// 그리고 이미 가지고 있는 기능들을 사용하는게 좋아.
// 만약 네가 코코아톡 클론 강의를 들었다면
// form에 대해 꽤 많은 시간을 들여 공부했다는 것을 알거야
// 사실 input은 지금 여기 보이는 것보다 더 많이 일들을 할 수 있거든.
// 예를 들자면 이 input을 필수입력 항목으로 만들어 줄 수 있어.
// 또는 input 자체적으로 최대 글자수를 15로 조절할 수도 있지. 이런 식으로 할 수 있고, 이건 HTML 가 이미 우리를 위해 해주고 있어.
// 이런 이점을 잘 활용해야겠지.
// 좋아. 근데 문제는 Log In을 클릭할 때 HTML에서 확인 작업을 안하고 있어.
// 그 이유는 이 부분이 form이 아니기 때문이야.
// 코코아톡 강의를 수강했다면, input의 유효성 검사를 작동시키기 위해서는
// input이 form 안에 있어야 된다는 걸 기억할거야.
// 근데 여기서 문제가 하나 발생하지.
// 이제 여기 작업한 validation은 모두 지우고
// username을 아직 받는다는 걸 확인하기 위해서 console.log(username)만 남겨줄거야.
// 이제 아주 인상적인 것을 보게될 텐데,
// 이제 새로고침을 하고나서
// 여기에 아무런 값도 입력하지 않을거야.
// 그대로 Log In을 클릭하면 브라우저가 우리를 돕고 있는 걸 볼 수 있어.
// 우리가 활용할 수 있는건 전부 활용해야 겠지?
// "필드에 값을 입력하시오" 완벽해.
// 큰 도움이 되고 있어.
// 긴 값을 입력해보면 보다시피 최대길이도 적용되고 있지.
// 역시나 브라우저가 우리를 돕고 있어. 아주 좋았어.
// 내가 이 이상으로 입력을 하고 싶어도 할 수가 없어. 멋져!
// 그렇지? 이것 좀 봐
// 문제는, 내가 Log In을 클릭하면 보다시피 URL에 이상한게 따라붙고 있어
// 그리고 페이지가 새로고침되고 있어.
// 보여줄게. 여기 입력을 하고 버튼을 누르면, 새로고침이 실행돼. 값이 사라져버려.
// 말그대로 내 웹사이트를 재시작시키고 있는거야. 이렇게 되는 이유는 form이 submit되고 있기 때문이야.
// 만약 코코아톡 클론 강의를 들었다면 기억날텐데,
// input 안에 있는 button 을 누르거나 type이 submit인 input을 클릭하면
// 둘이 같은 건데
// 이렇게 하고 버튼을 누르면
// 내가 작성한 form이 submit 되지.
// 여기에 입력을 하고 클릭하면, form이 submit 되고 있어.
// 여기서 우리는 이제 더 이상 버튼을 클릭하는 것에 신경 쓸 필요가 없어.
// 왜냐하면 지금 보는 것처럼 입력 후에 엔터를 눌러도 form은 submit되고 있거든.
// 알겠지?
// 그리고 이러한 규칙들은 이미 HTML을 공부해오며 우리가 알고 있는 것들이야.
// 우리가 form 안에서 엔터를 누르고 input이 더 존재하지 않는다면 자동으로 submit 된다는 규칙
// 또는, form안에 있는 버튼을 눌렀을 때, 이 때도 form이 자동으로 submit된다는 것이지
// 내가 하고 싶은 말은 더 이상 click에 신경 쓸 필요가 없다는 거야.
// 이제 우리의 관심사는 form을 submit 하는 것이야
// 이 순간에 우리는 브라우저가 새로고침하지 않고 user 정보를 저장하도록 하고 싶은거야.
// 조금씩 목표에 가까워 지고 있지?
// 이제 우리는 HTML의 도움을 이용하고 있어
// 하지만 HTML의 도움을 활용하려면 이 input을 form 안에 위치시켜야 해.
// 그리고 input을 form안에 넣었을 경우에는 우리가 엔터를 누를 때마다
// form은 자동적으로 submit되고 있어.
// 이건 우리가 원하는게 아냐. 왜냐면 form이 submit될 때마다 페이지는 새로고침 되거든.
// 웹사이트 전체를 매번 새로고침 하고 싶지는 않아. 알겠지?
// 그럼 이제 다음 강의에서 볼텐데,
// 거기서 이 문제점을 고칠거고 우리는 이제 적어도 뭘 고쳐야 할 지 알고 있어.
// 우리는 이 form이 submit 되는 걸 막아주도록 할거야.
// 이런 식으로 작동하는 걸 원하지 않아.
// 그리고 이것도...
// 다음 영상에서 보자구.
// 지금 console에 error가 뜨는 건 알고 있어.
// 다음 강의에서 고칠테니 걱정 말라구.
// 바이 바이.
